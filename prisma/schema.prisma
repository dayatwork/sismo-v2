// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberStatus {
  FULLTIME
  PARTTIME
  INTERN
  OUTSOURCED
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  name                 String
  phone                String?              @unique
  photo                String?
  isSuperAdmin         Boolean              @default(false)
  isActive             Boolean              @default(true)
  memberId             String?              @unique
  memberStatus         MemberStatus?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  connections          Connection[]
  password             Password?
  roles                Role[]
  documents            Document[]
  meetingParticipants  MeetingParticipant[]
  sentMessages         Message[]            @relation("sender")
  coversations         Conversation[]       @relation("member")
  seenMessages         Message[]            @relation("seen")
  createdConversations Conversation[]       @relation("createdConversation")
  createdJournals      Journal[]
  notifications        Notification[]
  departmentMembers    DepartmentMember[]
  teamMembers          TeamMember[]
  workspaces           Workspace[]
  workspaceMembers     WorkspaceMember[]
  boardMembers         BoardMember[]
  boardTasks           BoardTask[]
  taskTrackers         TaskTracker[]
  attachments          Attachment[]
  regularWage          RegularWage?
  regularWageHistories RegularWageHistory[]
  overtimeWage         OvertimeWage?
  supplementalWages    SupplementalWage[]
  deductions           Deduction[]
  payrollTransactions  PayrollTransaction[]

  @@index([name])
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Connection {
  id           String   @id @default(uuid())
  providerName String
  providerId   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String   @default("")
  permissions String[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AttachmentType {
  DOCUMENT
  LINK
  FILE
}

model Attachment {
  id            String           @id @default(uuid())
  displayName   String           @default("")
  url           String
  type          AttachmentType
  owner         User             @relation(fields: [ownerId], references: [id])
  ownerId       String
  trackerItem   TaskTrackerItem? @relation(fields: [trackerItemId], references: [id])
  trackerItemId String?
  task          BoardTask?       @relation(fields: [taskId], references: [id])
  taskId        String?
  createdAt     DateTime         @default(now())

  @@index([trackerItemId])
  @@index([taskId])
  @@index([ownerId])
  @@index([displayName])
}

model Settings {
  id                                   String   @id
  allowEditTimeTracker                 Boolean  @default(false)
  timeTrackerEditLimitInDays           Int?     @db.SmallInt
  timeTrackerLimited                   Boolean  @default(true)
  maxTimeTrackerInHours                Int?     @default(4) @db.SmallInt
  allowClockinWithNewTask              Boolean  @default(true)
  allowClockinWithUnplannedTasks       Boolean  @default(true)
  requireUploadAttachmentBeforeClockIn Boolean  @default(false)
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime @updatedAt
}

model Document {
  id          String     @id @default(uuid())
  title       String     @default("Untitled")
  content     String     @default("") @db.Text
  icon        String?    @db.Text
  coverImage  String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPublished Boolean    @default(false)
  whiteList   String[]   @default([])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  parentId    String?
  parent      Document?  @relation("parentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children    Document[] @relation("parentChildren")

  @@index([title])
  @@index([userId])
}

enum NormalBalance {
  CREDIT
  DEBIT
}

model ChartOfAccountClass {
  id                  String               @id @default(uuid())
  name                String               @unique
  normalBalance       NormalBalance
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  chartOfAccountTypes ChartOfAccountType[]
}

model ChartOfAccountType {
  id              String              @id @default(uuid())
  classId         String
  class           ChartOfAccountClass @relation(fields: [classId], references: [id])
  name            String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  chartOfAccounts ChartOfAccount[]
}

model ChartOfAccount {
  id             String             @id @default(uuid())
  type           ChartOfAccountType @relation(fields: [typeId], references: [id])
  typeId         String
  code           String             @unique
  accountName    String
  normalBalance  NormalBalance
  description    String?            @default("")
  openingBalance Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  journals       Journal[]

  @@index([accountName])
  @@index([typeId])
}

enum ExpenseStatus {
  SUBMITTED
  APPROVED
  REJECTED
}

model Journal {
  id               String         @id @default(uuid())
  referenceNumber  String         @unique
  chartOfAccount   ChartOfAccount @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId String
  amount           Decimal
  currency         String
  description      String?        @default("")
  date             DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        User           @relation(fields: [createdById], references: [id])
  createdById      String

  @@index([chartOfAccountId])
}

enum MeetingStatus {
  OPEN
  CLOSE
}

model Meeting {
  id                String               @id @default(uuid())
  roomName          String               @unique
  description       String?              @default("")
  status            MeetingStatus        @default(OPEN)
  openedAt          DateTime             @default(now())
  closedAt          DateTime?
  requireInvitation Boolean              @default(false)
  participants      MeetingParticipant[]

  @@index([status])
}

model MeetingParticipant {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId String
  joinedAt  DateTime?
  leavedAt  DateTime?

  @@index([meetingId])
}

model Conversation {
  id            String    @id @default(uuid())
  name          String?
  isGroup       Boolean?
  createdAt     DateTime  @default(now())
  createdBy     User      @relation("createdConversation", fields: [createdById], references: [id])
  createdById   String
  lastMessageAt DateTime  @default(now())
  messages      Message[]
  users         User[]    @relation("member")
}

model Message {
  id             String       @id @default(uuid())
  body           String?
  fileUrl        String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation("sender", fields: [senderId], references: [id])
  senderId       String
  seen           User[]       @relation("seen")
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String?  @default("")
  isBroadcast Boolean  @default(false)
  receiver    User?    @relation(fields: [receiverId], references: [id])
  receiverId  String?
  read        Boolean  @default(false)
  type        String?
  thumbnail   String?
  link        String
  createdAt   DateTime @default(now())
}

model Department {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String             @default("")
  logo              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  departmentMembers DepartmentMember[]
}

enum DepartmentRole {
  HEAD
  STAFF
}

model DepartmentMember {
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  department   Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  role         DepartmentRole

  @@id([userId, departmentId])
  @@index([departmentId])
}

model Team {
  id          String       @id @default(uuid())
  name        String       @unique
  description String       @default("")
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamMembers TeamMember[]
}

enum TeamRole {
  LEADER
  MEMBER
}

model TeamMember {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   TeamRole

  @@id([userId, teamId])
  @@index([teamId])
}

enum WorkspacePrivacy {
  OPEN
  CLOSED
}

enum WorkspaceStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Workspace {
  id               String            @id @default(uuid())
  name             String
  description      String            @default("")
  privacy          WorkspacePrivacy
  status           WorkspaceStatus   @default(ACTIVE)
  owner            User              @relation(fields: [ownerId], references: [id])
  ownerId          String
  icon             String?
  brandColor       String?
  coverImage       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workspaceRoles   WorkspaceRole[]
  workspaceMembers WorkspaceMember[]
  boards           Board[]

  @@index([name])
}

model WorkspaceRole {
  id               String            @id @default(uuid())
  workspace        Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId      String
  name             String
  description      String            @default("")
  permissions      String[]
  workspaceMembers WorkspaceMember[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model WorkspaceMember {
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        WorkspaceRole @relation(fields: [roleId], references: [id])
  roleId      String

  @@id([userId, workspaceId])
}

enum BoardPrivacy {
  PUBLIC
  PRIVATE
}

enum BoardStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Board {
  id           String           @id @default(uuid())
  workspace    Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  name         String
  description  String           @default("")
  privacy      BoardPrivacy
  status       BoardStatus      @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  boardMembers BoardMember[]
  taskGroups   BoardTaskGroup[]
  tasks        BoardTask[]

  @@index([workspaceId])
  @@index([name])
  @@index([workspaceId, name])
}

model BoardMember {
  board   Board   @relation(fields: [boardId], references: [id])
  boardId String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  isOwner Boolean @default(false)

  @@id([boardId, userId])
}

model BoardTaskGroup {
  id      String      @id @default(uuid())
  board   Board       @relation(fields: [boardId], references: [id])
  boardId String
  name    String
  color   String
  tasks   BoardTask[]

  @@unique([boardId, name])
  @@index([boardId])
}

enum BoardTaskStatus {
  DONE
  IN_PROGRESS
  TODO
  BACKLOG
  STUCK
  ON_HOLD
}

enum BoardTaskPriority {
  NO_PRIORITY
  URGENT
  HIGH
  MEDIUM
  LOW
}

model BoardTask {
  id                     String            @id @default(cuid())
  name                   String
  status                 BoardTaskStatus   @default(BACKLOG)
  priority               BoardTaskPriority @default(NO_PRIORITY)
  owner                  User              @relation(fields: [ownerId], references: [id])
  ownerId                String
  board                  Board?            @relation(fields: [boardId], references: [id])
  boardId                String?
  group                  BoardTaskGroup?   @relation(fields: [groupId], references: [id])
  groupId                String?
  timelineStart          DateTime?
  timelineEnd            DateTime?
  plannedEffortInMinutes Int?
  effortSpentInMinutes   Int?
  completionDate         DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  parentTaskId           String?
  parentTask             BoardTask?        @relation("TaskSubTasks", fields: [parentTaskId], references: [id])
  subTasks               BoardTask[]       @relation("TaskSubTasks")
  dependencies           BoardTask[]       @relation("Dependency")
  dependents             BoardTask[]       @relation("Dependency")
  trackerItems           TaskTrackerItem[]
  attachments            Attachment[]

  @@index([boardId])
  @@index([ownerId])
  @@index([ownerId, boardId])
}

model TaskTracker {
  id           String            @id @default(uuid())
  owner        User              @relation(fields: [ownerId], references: [id])
  ownerId      String
  startAt      DateTime          @default(now())
  endAt        DateTime?
  week         Int               @db.SmallInt
  month        Int               @db.SmallInt
  year         Int               @db.SmallInt
  trackerItems TaskTrackerItem[]
  approved     Boolean           @default(false)
  locked       Boolean           @default(false)

  @@index([ownerId])
  @@index([ownerId, week, year])
}

model TaskTrackerItem {
  id                    String       @id @default(uuid())
  tracker               TaskTracker  @relation(fields: [trackerId], references: [id])
  trackerId             String
  task                  BoardTask    @relation(fields: [taskId], references: [id])
  taskId                String
  note                  String       @default("")
  taskCompletion        Int          @db.SmallInt
  workDurationInMinutes Int          @db.SmallInt
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  attachments           Attachment[]

  @@index([taskId])
  @@index([trackerId])
}

enum RegularWageType {
  SALARY
  HOURLY
}

model RegularWage {
  id                 String          @id @default(uuid())
  user               User            @relation(fields: [userId], references: [id])
  userId             String          @unique
  type               RegularWageType
  amount             Int
  normalWorkingHours Int             @db.SmallInt
}

model RegularWageHistory {
  id     String          @id @default(uuid())
  user   User            @relation(fields: [userId], references: [id])
  userId String
  type   RegularWageType
  amount Int
}

model OvertimeWage {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
  amount      Int
  maxOvertime Int?   @db.SmallInt
}

model SupplementalWageName {
  id                String             @id @default(uuid())
  name              String             @unique
  supplementalWages SupplementalWage[]
}

model SupplementalWage {
  id     String               @id @default(uuid())
  user   User                 @relation(fields: [userId], references: [id])
  userId String
  name   SupplementalWageName @relation(fields: [nameId], references: [id])
  nameId String
  amount Int
  fixed  Boolean
}

model DeductionName {
  id         String      @id @default(uuid())
  name       String
  deductions Deduction[]
}

model Deduction {
  id     String        @id @default(uuid())
  user   User          @relation(fields: [userId], references: [id])
  userId String
  name   DeductionName @relation(fields: [nameId], references: [id])
  nameId String
  amount Int
  fixed  Boolean
}

enum PayrollType {
  MONTHLY_SALARY
  RELIGIOUS_HOLIDAY_ALLOWANCE
}

model Payroll {
  id           String               @id @default(uuid())
  type         PayrollType
  code         String               @unique
  month        Int                  @db.SmallInt
  year         Int                  @db.SmallInt
  note         String               @default("")
  locked       Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  transactions PayrollTransaction[]
}

model PayrollTransaction {
  id               String                   @id @default(uuid())
  payroll          Payroll                  @relation(fields: [payrollId], references: [id], onDelete: Cascade)
  payrollId        String
  user             User                     @relation(fields: [userId], references: [id])
  userId           String
  total            Int
  isLocked         Boolean                  @default(false)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  transactionItems PayrollTransactionItem[]

  @@unique([payrollId, userId])
  @@index([payrollId])
  @@index([userId])
}

enum TransactionItemType {
  WAGE
  DEDUCTION
}

model PayrollTransactionItem {
  id            String              @id @default(uuid())
  transaction   PayrollTransaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  type          TransactionItemType
  amount        Int
  note          String              @default("")
  editable      Boolean

  @@index([transactionId])
}
